%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2387 716
%%HiResBoundingBox: 0 0 2386.0798 715.91998
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2386.0798 715.91998 re
W
q
[0.24 0 0 -0.24 0 715.91998] cm
q
0 0 9941.667 2980.6255 re
W*
q
[3.124483 0 0 3.125833 0.0652851 0] cm
/DeviceRGB {} CS
[0.0667 0.1765 0.3059] SC
/DeviceRGB {} cs
[0.0667 0.1765 0.3059] sc
0 0 3181.8181 954.54547 re
f
Q
q
[28.404387 0 0 28.416664 284.10916 284.1666] cm
q
8 0 m
102 0 l
102.262016 0 102.523399 0.012841 102.784149 0.038522 c
103.044891 0.064204 103.303749 0.102602 103.560722 0.153718 c
103.817703 0.204833 104.071556 0.26842 104.322281 0.344477 c
104.573006 0.420535 104.819405 0.508697 105.061462 0.608964 c
105.303528 0.709231 105.540092 0.821119 105.771164 0.94463 c
106.002243 1.068141 106.226707 1.202678 106.444557 1.348243 c
106.662415 1.493808 106.872604 1.649699 107.075142 1.815916 c
107.277679 1.982134 107.471581 2.157877 107.656845 2.343146 c
107.842117 2.528415 108.01786 2.722317 108.184074 2.924854 c
108.350296 3.12739 108.506187 3.337585 108.651741 3.555438 c
108.79731 3.773291 108.931847 3.997754 109.055359 4.228826 c
109.178871 4.459898 109.290756 4.696467 109.391022 4.938532 c
109.491295 5.180598 109.579453 5.426995 109.65551 5.677723 c
109.731567 5.928451 109.795158 6.182302 109.846268 6.439277 c
109.897392 6.696253 109.935799 6.955114 109.961479 7.215863 c
109.98716 7.476611 110 7.73799 110 8 c
110 77 l
110 77.262016 109.98716 77.523392 109.961472 77.784134 c
109.935799 78.044884 109.897392 78.303741 109.846268 78.560715 c
109.795158 78.817696 109.731575 79.071548 109.655518 79.322273 c
109.57946 79.572998 109.491295 79.819389 109.391022 80.061455 c
109.290756 80.303528 109.178871 80.540092 109.055359 80.771164 c
108.931847 81.002235 108.79731 81.2267 108.651749 81.44455 c
108.506187 81.662407 108.350304 81.872604 108.18409 82.075142 c
108.017868 82.277679 107.842117 82.471581 107.656845 82.656853 c
107.471581 82.842125 107.277672 83.017868 107.075134 83.18409 c
106.872597 83.350304 106.662407 83.506187 106.44455 83.651749 c
106.2267 83.797318 106.002235 83.931854 105.771164 84.055367 c
105.540092 84.178879 105.303528 84.290771 105.061455 84.391029 c
104.819397 84.491302 104.572998 84.579468 104.322266 84.655525 c
104.071541 84.731583 103.817696 84.795166 103.560715 84.846275 c
103.303749 84.8974 103.044891 84.935799 102.784142 84.961479 c
102.523392 84.98716 102.262016 85 102 85 c
8 85 l
7.73799 85 7.476611 84.98716 7.215863 84.961479 c
6.955114 84.935799 6.696252 84.8974 6.439277 84.846275 c
6.182301 84.795166 5.92845 84.731575 5.677723 84.655518 c
5.426995 84.57946 5.180598 84.491302 4.938532 84.391029 c
4.696467 84.290771 4.459898 84.178879 4.228826 84.055367 c
3.997754 83.931854 3.773291 83.797318 3.555438 83.651756 c
3.337585 83.506195 3.12739 83.350304 2.924854 83.18409 c
2.722317 83.017868 2.528415 82.842125 2.343146 82.656853 c
2.157877 82.471581 1.982134 82.277679 1.815916 82.075142 c
1.649699 81.872604 1.493808 81.662407 1.348243 81.44455 c
1.202678 81.2267 1.06814 81.002235 0.94463 80.771164 c
0.821119 80.540092 0.709231 80.303528 0.608964 80.061455 c
0.508697 79.819389 0.420535 79.572998 0.344477 79.322273 c
0.26842 79.071548 0.204833 78.817696 0.153718 78.560715 c
0.102602 78.303741 0.064204 78.044884 0.038522 77.784134 c
0.012841 77.523392 0 77.262016 0 77 c
0 8 l
0 7.73799 0.012841 7.476611 0.038522 7.215863 c
0.064204 6.955114 0.102602 6.696252 0.153718 6.439277 c
0.204833 6.182301 0.26842 5.92845 0.344477 5.677723 c
0.420535 5.426995 0.508697 5.180598 0.608964 4.938532 c
0.709231 4.696467 0.821119 4.459898 0.94463 4.228826 c
1.068141 3.997754 1.202678 3.773291 1.348243 3.555438 c
1.493808 3.337585 1.649699 3.12739 1.815916 2.924854 c
1.982134 2.722317 2.157877 2.528415 2.343146 2.343146 c
2.528415 2.157877 2.722317 1.982134 2.924854 1.815916 c
3.12739 1.649699 3.337585 1.493808 3.555438 1.348243 c
3.773291 1.202678 3.997754 1.06814 4.228826 0.94463 c
4.459898 0.821119 4.696467 0.709231 4.938532 0.608964 c
5.180598 0.508697 5.426995 0.420535 5.677723 0.344477 c
5.928451 0.26842 6.182302 0.204833 6.439277 0.153718 c
6.696253 0.102602 6.955114 0.064204 7.215863 0.038522 c
7.476611 0.012841 7.73799 0 8 0 c
h
W
[110.000001 0 0 85.000004 -0.0000000819868 0.00000422898] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin 0 def
/yMin -0 def
/xMax 1 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.423 mul 0.561 add
1 index 1 exp 0.588 mul 0.369 add
2 index 1 exp 0.486 mul 0.145 add
4 3 roll pop 
}
/xpdfFunc0_0 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp -0.423 mul 0.984 add
1 index 1 exp -0.588 mul 0.957 add
2 index 1 exp -0.486 mul 0.631 add
4 3 roll pop 
}
/xpdfFunc0_1 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
dup 0.5 lt { 0 sub 2 mul 0 add xpdfFunc0_0 } {
0.5 sub 2 mul 0 add xpdfFunc0_1
} ifelse
}
def
0 1 0 axialSH
Q
Q
q
[28.004328 0 0 28.016428 460.13632 94.055153] cm
/DeviceRGB {} CS
[0.0667 0.2471 0.3804] SC
/DeviceRGB {} cs
[0.0667 0.2471 0.3804] sc
49.5 34.200001 m
71.900002 34.200001 77.400002 47.800003 79.300003 61 c
79.600006 62.700001 82.200005 64.099998 82.200005 64.099998 c
16.799999 64.099998 l
16.799999 64.099998 19.5 62.799999 19.699999 61 c
21.6 47.799999 27.1 34.200001 49.5 34.200001 c
49.5 32.200001 m
24.700001 32.200001 19.4 48.5 17.700001 60.800003 c
17.6 61.100002 16.700001 61.900002 15.900001 62.400002 c
15.1 62.800003 14.6 63.700001 14.900001 64.700005 c
15.1 65.600006 15.900001 66.200005 16.800001 66.200005 c
82.300003 66.200005 l
83.200005 66.200005 84 65.600006 84.200005 64.700005 c
84.400002 63.800003 84.000008 62.900005 83.100006 62.500004 c
82.300003 62.100002 81.300003 61.300003 81.300003 60.900005 c
79.599998 48.5 74.400002 32.200001 49.5 32.200001 c
h
f
29.5 49 m
29 49 28.4 48.799999 28 48.400002 c
27.200001 47.600002 27.299999 46.300003 28.1 45.600002 c
30.5 43.300003 33.400002 41.300003 36.5 39.700001 c
37.5 39.200001 38.700001 39.600002 39.200001 40.5 c
39.700001 41.5 39.299999 42.700001 38.400002 43.200001 c
35.600002 44.700001 33.100002 46.400002 30.900002 48.5 c
30.4 48.900002 29.9 49 29.5 49 c
h
f
81.099998 70.699997 m
81.599998 71.5 82.299995 72.099998 83 72.599998 c
83 76 l
16 76 l
16 72.599998 l
16.6 72.099998 17.299999 71.5 17.9 70.699997 c
81.099998 70.699997 l
82.300003 68.699997 m
16.700001 68.699997 l
16.200001 70 14.700001 71.099998 14.000001 71.599998 c
14.000001 71.799995 l
14.000001 78 l
85 78 l
85 71.800003 l
85 71.600006 l
84.300003 71.199997 82.699997 70.099998 82.300003 68.699997 c
h
f
47.5 24 4 6 re
f
55 26 m
44 26 l
42.900002 26 42 25.1 42 24 c
42 22.9 42.900002 22 44 22 c
55 22 l
56.099998 22 57 22.9 57 24 c
57 25.1 56.099998 26 55 26 c
h
f
Q
q
[18.813345 0 0 18.821476 3908.9514 965.57556] cm
q
3.6 37.759998 m
3.6 14.239998 l
3.6 12.879998 4.68 11.799997 6.08 11.799997 c
7.44 11.799997 8.520001 12.879997 8.520001 14.239998 c
8.520001 23.639997 l
21.880001 23.639997 l
21.880001 14.239998 l
21.880001 12.879998 22.960001 11.799997 24.320002 11.799997 c
25.720001 11.799997 26.800001 12.879997 26.800001 14.239998 c
26.800001 37.759998 l
26.800001 39.119999 25.720001 40.199997 24.320002 40.199997 c
22.960001 40.199997 21.880001 39.119995 21.880001 37.759998 c
21.880001 28.199997 l
8.520001 28.199997 l
8.520001 37.759998 l
8.520001 39.119999 7.440002 40.199997 6.080001 40.199997 c
4.680001 40.199997 3.600001 39.119995 3.600001 37.759998 c
3.6 37.759998 l
h
43.48 40.48 m
37.040001 40.48 32.279999 35.559998 32.279999 29.559999 c
32.279999 29.48 l
32.279999 23.439999 37.079998 18.439999 43.559998 18.439999 c
50.039997 18.439999 54.799995 23.359999 54.799995 29.399998 c
54.799995 29.479998 l
54.799995 35.479996 49.999996 40.479996 43.479996 40.479996 c
43.48 40.48 l
h
43.560001 36.240002 m
47.480003 36.240002 49.960003 33.200001 49.960003 29.560001 c
49.960003 29.480001 l
49.960003 25.760002 47.280003 22.68 43.480003 22.68 c
39.600002 22.68 37.120003 25.720001 37.120003 29.4 c
37.120003 29.48 l
37.120003 33.16 39.800003 36.239998 43.560001 36.239998 c
43.560001 36.240002 l
h
66.959999 40.400002 m
64.279999 40.400002 61.360001 39.560001 58.919998 37.880001 c
58.399998 37.600002 58 37 58 36.200001 c
58 35.119999 58.84 34.240002 59.959999 34.240002 c
60.360001 34.240002 60.719997 34.360001 61 34.52 c
63.040001 35.880001 65.160004 36.560001 67.080002 36.560001 c
69.160004 36.560001 70.360001 35.68 70.360001 34.280003 c
70.360001 34.200001 l
70.360001 32.560001 68.120003 32 65.639999 31.240002 c
62.52 30.360003 59.040001 29.080002 59.040001 25.040001 c
59.040001 24.960001 l
59.040001 20.960001 62.360001 18.52 66.559998 18.52 c
68.799995 18.52 71.159996 19.16 73.199997 20.24 c
73.879997 20.6 74.360001 21.24 74.360001 22.08 c
74.360001 23.200001 73.480003 24.040001 72.360001 24.040001 c
71.959999 24.040001 71.720001 23.960001 71.400002 23.800001 c
69.68 22.920002 67.919998 22.360001 66.440002 22.360001 c
64.560005 22.360001 63.480003 23.24 63.480003 24.440001 c
63.480003 24.52 l
63.480003 26.08 65.760002 26.720001 68.240005 27.52 c
71.320007 28.48 74.800003 29.880001 74.800003 33.68 c
74.800003 33.760002 l
74.800003 38.200001 71.360001 40.400002 66.960007 40.400002 c
66.959999 40.400002 l
h
79.760002 44.200001 m
79.760002 21.08 l
79.760002 19.719999 80.800003 18.639999 82.160004 18.639999 c
83.520004 18.639999 84.600006 19.719999 84.600006 21.08 c
84.600006 22.4 l
86.160004 20.199999 88.360008 18.439999 91.800003 18.439999 c
96.760002 18.439999 101.600006 22.359999 101.600006 29.399998 c
101.600006 29.479998 l
101.600006 36.479996 96.800003 40.439999 91.800003 40.439999 c
88.280006 40.439999 86.080002 38.68 84.600006 36.719997 c
84.600006 44.199997 l
84.600006 45.559998 83.520004 46.599998 82.160004 46.599998 c
80.840004 46.599998 79.760002 45.559998 79.760002 44.199997 c
79.760002 44.200001 l
h
90.639999 36.240002 m
93.959999 36.240002 96.68 33.640003 96.68 29.480001 c
96.68 29.400002 l
96.68 25.320002 93.919998 22.640001 90.639999 22.640001 c
87.360001 22.640001 84.479996 25.360001 84.479996 29.400002 c
84.479996 29.480001 l
84.479996 33.52 87.359993 36.240002 90.639999 36.240002 c
h
106.519997 13.44 m
106.519997 13.2 l
106.519997 11.76 107.719994 10.84 109.279999 10.84 c
110.840004 10.84 112.040001 11.76 112.040001 13.200001 c
112.040001 13.440001 l
112.040001 14.880001 110.840004 15.84 109.279999 15.84 c
107.719994 15.84 106.519997 14.88 106.519997 13.440001 c
106.519997 13.44 l
h
106.879997 37.799999 m
106.879997 21.08 l
106.879997 19.719999 107.919998 18.639999 109.279999 18.639999 c
110.639999 18.639999 111.720001 19.719999 111.720001 21.08 c
111.720001 37.799999 l
111.720001 39.16 110.639999 40.200001 109.279999 40.200001 c
107.959999 40.200001 106.879997 39.16 106.879997 37.799999 c
h
125.120003 40.360001 m
121.560005 40.360001 119.040001 38.799999 119.040001 34.16 c
119.040001 23.040001 l
118.239998 23.040001 l
117.079994 23.040001 116.159996 22.120001 116.159996 20.960001 c
116.159996 19.800001 117.079994 18.880001 118.239998 18.880001 c
119.040001 18.880001 l
119.040001 15.280001 l
119.040001 13.960001 120.120003 12.880001 121.480003 12.880001 c
122.800003 12.880001 123.880005 13.960001 123.880005 15.280001 c
123.880005 18.880001 l
127.680008 18.880001 l
128.840012 18.880001 129.800003 19.800001 129.800003 20.960001 c
129.800003 22.120001 128.839996 23.040001 127.68 23.040001 c
123.879997 23.040001 l
123.879997 33.400002 l
123.879997 35.280003 124.839996 36.040001 126.479996 36.040001 c
127.039993 36.040001 127.519997 35.920002 127.679993 35.920002 c
128.759995 35.920002 129.719986 36.800003 129.719986 37.920002 c
129.719986 38.800003 129.11998 39.52 128.439987 39.800003 c
127.399986 40.160004 126.399986 40.360004 125.119987 40.360004 c
125.120003 40.360001 l
h
140.559998 40.439999 m
136.599991 40.439999 133.080002 38.16 133.080002 33.919998 c
133.080002 33.839996 l
133.080002 29.279997 136.639999 27.039997 141.800003 27.039997 c
144.160004 27.039997 145.839996 27.399998 147.479996 27.919996 c
147.479996 27.399996 l
147.479996 24.399996 145.639999 22.799995 142.23999 22.799995 c
140.399994 22.799995 138.87999 23.119995 137.559998 23.639996 c
137.279999 23.719995 137.039993 23.759996 136.800003 23.759996 c
135.680008 23.759996 134.76001 22.879997 134.76001 21.759996 c
134.76001 20.879997 135.360016 20.119997 136.080017 19.839996 c
138.080017 19.079996 140.12001 18.599997 142.88002 18.599997 c
146.040024 18.599997 148.400024 19.439997 149.88002 20.959997 c
151.440018 22.479998 152.160019 24.719997 152.160019 27.479998 c
152.160019 37.879997 l
152.160019 39.199997 151.120026 40.199997 149.800018 40.199997 c
148.400024 40.199997 147.440018 39.239998 147.440018 38.159996 c
147.440018 37.359997 l
146.000015 39.079998 143.800018 40.439995 140.560013 40.439995 c
140.559998 40.439999 l
h
141.919998 36.919998 m
145.119995 36.919998 147.559998 35.079998 147.559998 32.399998 c
147.559998 30.959997 l
146.319992 30.479998 144.679993 30.119997 142.759995 30.119997 c
139.639999 30.119997 137.799988 31.439997 137.799988 33.639996 c
137.799988 33.719997 l
137.799988 35.759998 139.599991 36.919998 141.919983 36.919998 c
141.919998 36.919998 l
h
158.240005 37.799999 m
158.240005 13 l
158.240005 11.68 159.279999 10.6 160.639999 10.6 c
162 10.6 163.080002 11.68 163.080002 13 c
163.080002 37.799999 l
163.080002 39.16 162 40.200001 160.639999 40.200001 c
159.319992 40.200001 158.240005 39.16 158.240005 37.799999 c
h
169.32001 13.44 m
169.32001 13.2 l
169.32001 11.76 170.52 10.84 172.08 10.84 c
173.64 10.84 174.84 11.76 174.84 13.200001 c
174.84 13.440001 l
174.84 14.880001 173.64 15.84 172.08 15.84 c
170.52 15.84 169.32001 14.88 169.32001 13.440001 c
169.32001 13.44 l
h
169.67999 37.799999 m
169.67999 21.08 l
169.67999 19.719999 170.71999 18.639999 172.07999 18.639999 c
173.43999 18.639999 174.51999 19.719999 174.51999 21.08 c
174.51999 37.799999 l
174.51999 39.16 173.43999 40.200001 172.07999 40.200001 c
170.75998 40.200001 169.67999 39.16 169.67999 37.799999 c
h
187.92 40.360001 m
184.36 40.360001 181.84 38.799999 181.84 34.16 c
181.84 23.040001 l
181.03999 23.040001 l
179.87999 23.040001 178.95999 22.120001 178.95999 20.960001 c
178.95999 19.800001 179.87999 18.880001 181.03999 18.880001 c
181.84 18.880001 l
181.84 15.280001 l
181.84 13.960001 182.92 12.880001 184.28 12.880001 c
185.60001 12.880001 186.67999 13.960001 186.67999 15.280001 c
186.67999 18.880001 l
190.48 18.880001 l
191.64 18.880001 192.59999 19.800001 192.59999 20.960001 c
192.59999 22.120001 191.63998 23.040001 190.48 23.040001 c
186.67999 23.040001 l
186.67999 33.400002 l
186.67999 35.280003 187.64 36.040001 189.28 36.040001 c
189.84 36.040001 190.31999 35.920002 190.48 35.920002 c
191.56 35.920002 192.51999 36.800003 192.51999 37.920002 c
192.51999 38.800003 191.91998 39.52 191.23999 39.800003 c
190.2 40.160004 189.2 40.360004 187.91998 40.360004 c
187.92 40.360001 l
h
201.12 46.52 m
199.75999 46.52 198.75999 46.32 197.75999 45.920002 c
197.03999 45.68 196.23999 45.080002 196.23999 43.920002 c
196.23999 42.720001 197.15999 41.920002 198.2 41.920002 c
198.59999 41.920002 198.84 42.000004 199.08 42.080002 c
199.64 42.240002 200.08 42.360001 200.75999 42.360001 c
202.2 42.360001 202.95999 41.760002 203.75999 40.119999 c
203.92 39.68 l
196.08 22.16 l
195.92 21.799999 195.8 21.32 195.8 21 c
195.8 19.639999 196.84 18.639999 198.2 18.639999 c
199.44 18.639999 200.12 19.359999 200.56 20.48 c
206.23999 34.52 l
211.51999 20.48 l
211.91998 19.48 212.59999 18.639999 213.84 18.639999 c
215.12 18.639999 216.16 19.639999 216.16 20.92 c
216.16 21.32 216.04001 21.84 215.96001 22.08 c
208.24001 40.599998 l
206.44 44.919998 204.52 46.519997 201.12001 46.519997 c
201.12 46.52 l
h
235.8 40 m
234.40001 40 233.32001 38.919998 233.32001 37.52 c
233.32001 14.48 l
233.32001 13.08 234.40001 12 235.8 12 c
252.08 12 l
253.28 12 254.28 13 254.28 14.2 c
254.28 15.44 253.28 16.4 252.08 16.4 c
238.24001 16.4 l
238.24001 23.68 l
250.28 23.68 l
251.48 23.68 252.48 24.68 252.48 25.92 c
252.48 27.120001 251.48 28.08 250.28 28.08 c
238.24001 28.08 l
238.24001 35.599998 l
252.28 35.599998 l
253.48 35.599998 254.48 36.599998 254.48 37.799999 c
254.48 39.040001 253.48 40 252.28 40 c
235.8 40 l
h
269.92001 40.400002 m
266.12003 40.400002 262.52002 39.200001 259.40002 36.880001 c
258.84003 36.48 258.44003 35.799999 258.44003 35 c
258.44003 33.720001 259.48004 32.720001 260.76004 32.720001 c
261.44003 32.720001 261.88004 32.920002 262.20004 33.16 c
264.52005 35 267.00003 36.040001 270.04004 36.040001 c
273.08005 36.040001 275.00003 34.600002 275.00003 32.52 c
275.00003 32.439999 l
275.00003 30.439999 273.88004 29.359999 268.68002 28.159998 c
262.72003 26.719997 259.36002 24.959997 259.36002 19.799999 c
259.36002 19.719999 l
259.36002 14.919999 263.36002 11.599999 268.92001 11.599999 c
272.44 11.599999 275.28 12.52 277.80002 14.199999 c
278.36002 14.519999 278.88 15.199999 278.88 16.16 c
278.88 17.440001 277.84 18.440001 276.56 18.440001 c
276.07999 18.440001 275.67999 18.32 275.28 18.08 c
273.12 16.68 271.04001 15.96 268.84 15.96 c
265.95999 15.96 264.28 17.440001 264.28 19.280001 c
264.28 19.360001 l
264.28 21.52 265.56 22.48 270.95999 23.76 c
276.88 25.200001 279.91998 27.32 279.91998 31.959999 c
279.91998 32.040001 l
279.91998 37.279999 275.79999 40.400002 269.91998 40.400002 c
269.92001 40.400002 l
h
285.72 37.52 m
285.72 14.24 l
285.72 12.88 286.79999 11.799999 288.20001 11.799999 c
289.56 11.799999 290.64001 12.879999 290.64001 14.24 c
290.64001 35.52 l
303.32001 35.52 l
304.56 35.52 305.56 36.52 305.56 37.760002 c
305.56 39.000004 304.56 40.000004 303.32001 40.000004 c
288.20001 40.000004 l
286.80002 40.000004 285.72 38.920002 285.72 37.520004 c
285.72 37.52 l
h
W
[301.959987 0 0 36.000002 3.599999 10.600001] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin 0 def
/yMin -0 def
/xMax 1 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.423 mul 0.561 add
1 index 1 exp 0.588 mul 0.369 add
2 index 1 exp 0.486 mul 0.145 add
4 3 roll pop 
}
/xpdfFunc1_0 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp -0.423 mul 0.984 add
1 index 1 exp -0.588 mul 0.957 add
2 index 1 exp -0.486 mul 0.631 add
4 3 roll pop 
}
/xpdfFunc1_1 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
dup 0.5 lt { 0 sub 2 mul 0 add xpdfFunc1_0 } {
0.5 sub 2 mul 0 add xpdfFunc1_1
} ifelse
}
def
0 1 0 axialSH
Q
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
